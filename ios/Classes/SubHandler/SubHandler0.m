//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler0.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapCoreFluttifyPlugin (SubHandler0)
- (NSDictionary<NSString*, Handler>*) getSubHandler0 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"AMapURLSearch::getLatestAMapApp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapURLSearch::getLatestAMapApp()");
            }
        
            // invoke native method
            [AMapURLSearch getLatestAMapApp];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"AMapURLSearch::openAMapNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            AMapNaviConfig* config = (AMapNaviConfig*) HEAP[args[@"config"]];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapURLSearch::openAMapNavigation(%@)", args[@"config"]);
            }
        
            // invoke native method
            BOOL result = [AMapURLSearch openAMapNavigation: config];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"AMapURLSearch::openAMapRouteSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            AMapRouteConfig* config = (AMapRouteConfig*) HEAP[args[@"config"]];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapURLSearch::openAMapRouteSearch(%@)", args[@"config"]);
            }
        
            // invoke native method
            BOOL result = [AMapURLSearch openAMapRouteSearch: config];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"AMapURLSearch::openAMapPOISearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            AMapPOIConfig* config = (AMapPOIConfig*) HEAP[args[@"config"]];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapURLSearch::openAMapPOISearch(%@)", args[@"config"]);
            }
        
            // invoke native method
            BOOL result = [AMapURLSearch openAMapPOISearch: config];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"AMapServices::sharedServices": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapServices::sharedServices()");
            }
        
            // invoke native method
            AMapServices* result = [AMapServices sharedServices];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"AMapURLSearch::getLatestAMapApp_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                [AMapURLSearch getLatestAMapApp];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"AMapURLSearch::openAMapNavigation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                AMapNaviConfig* config = (AMapNaviConfig*) HEAP[args[@"config"]];
        
                // ref
        
        
                // invoke native method
                BOOL result = [AMapURLSearch openAMapNavigation: config];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"AMapURLSearch::openAMapRouteSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                AMapRouteConfig* config = (AMapRouteConfig*) HEAP[args[@"config"]];
        
                // ref
        
        
                // invoke native method
                BOOL result = [AMapURLSearch openAMapRouteSearch: config];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"AMapURLSearch::openAMapPOISearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                AMapPOIConfig* config = (AMapPOIConfig*) HEAP[args[@"config"]];
        
                // ref
        
        
                // invoke native method
                BOOL result = [AMapURLSearch openAMapPOISearch: config];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"AMapServices::sharedServices_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                AMapServices* result = [AMapServices sharedServices];
        
                // result
                // return a ref
                HEAP[[NSNumber numberWithLong: (result).hash]] = result;
                NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"AMapNaviConfig::get_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::get_appScheme");
            }
        
            // ref object
            AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.appScheme;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapNaviConfig::get_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::get_appName");
            }
        
            // ref object
            AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.appName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapNaviConfig::get_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::get_destination");
            }
        
            // ref object
            AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.destination;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapNaviConfig::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::get_strategy");
            }
        
            // ref object
            AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapDrivingStrategy result = ref.strategy;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRouteConfig::get_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::get_appScheme");
            }
        
            // ref object
            AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.appScheme;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRouteConfig::get_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::get_appName");
            }
        
            // ref object
            AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.appName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRouteConfig::get_startCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::get_startCoordinate");
            }
        
            // ref object
            AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.startCoordinate;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapRouteConfig::get_destinationCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::get_destinationCoordinate");
            }
        
            // ref object
            AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.destinationCoordinate;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapRouteConfig::get_drivingStrategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::get_drivingStrategy");
            }
        
            // ref object
            AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapDrivingStrategy result = ref.drivingStrategy;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRouteConfig::get_transitStrategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::get_transitStrategy");
            }
        
            // ref object
            AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapTransitStrategy result = ref.transitStrategy;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRouteConfig::get_routeType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::get_routeType");
            }
        
            // ref object
            AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapRouteSearchType result = ref.routeType;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOIConfig::get_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::get_appScheme");
            }
        
            // ref object
            AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.appScheme;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOIConfig::get_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::get_appName");
            }
        
            // ref object
            AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.appName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOIConfig::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::get_keywords");
            }
        
            // ref object
            AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.keywords;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOIConfig::get_leftTopCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::get_leftTopCoordinate");
            }
        
            // ref object
            AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.leftTopCoordinate;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOIConfig::get_rightBottomCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::get_rightBottomCoordinate");
            }
        
            // ref object
            AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.rightBottomCoordinate;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapServices::get_apiKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapServices::get_apiKey");
            }
        
            // ref object
            AMapServices* ref = (AMapServices*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.apiKey;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapServices::get_enableHTTPS": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapServices::get_enableHTTPS");
            }
        
            // ref object
            AMapServices* ref = (AMapServices*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.enableHTTPS;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapServices::get_crashReportEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapServices::get_crashReportEnabled");
            }
        
            // ref object
            AMapServices* ref = (AMapServices*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.crashReportEnabled;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapServices::get_identifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapServices::get_identifier");
            }
        
            // ref object
            AMapServices* ref = (AMapServices*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.identifier;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapNaviConfig::get_appScheme_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.appScheme;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNaviConfig::get_appName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.appName;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNaviConfig::get_destination_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                CLLocationCoordinate2D result = ref.destination;
        
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
                HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
                NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNaviConfig::get_strategy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapDrivingStrategy result = ref.strategy;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRouteConfig::get_appScheme_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.appScheme;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRouteConfig::get_appName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.appName;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRouteConfig::get_startCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                CLLocationCoordinate2D result = ref.startCoordinate;
        
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
                HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
                NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRouteConfig::get_destinationCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                CLLocationCoordinate2D result = ref.destinationCoordinate;
        
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
                HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
                NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRouteConfig::get_drivingStrategy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapDrivingStrategy result = ref.drivingStrategy;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRouteConfig::get_transitStrategy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapTransitStrategy result = ref.transitStrategy;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRouteConfig::get_routeType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapRouteSearchType result = ref.routeType;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIConfig::get_appScheme_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.appScheme;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIConfig::get_appName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.appName;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIConfig::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.keywords;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIConfig::get_leftTopCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                CLLocationCoordinate2D result = ref.leftTopCoordinate;
        
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
                HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
                NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIConfig::get_rightBottomCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                CLLocationCoordinate2D result = ref.rightBottomCoordinate;
        
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
                HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
                NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapServices::get_apiKey_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapServices* ref = (AMapServices*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.apiKey;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapServices::get_enableHTTPS_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapServices* ref = (AMapServices*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BOOL result = ref.enableHTTPS;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapServices::get_crashReportEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapServices* ref = (AMapServices*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BOOL result = ref.crashReportEnabled;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapServices::get_identifier_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapServices* ref = (AMapServices*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.identifier;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNaviConfig::set_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::set_appScheme");
            }
        
            // args
            // jsonable arg
            NSString* appScheme = (NSString*) args[@"appScheme"];
        
            // ref
            AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.appScheme = appScheme;
            methodResult(@"success");
        },
        
        @"AMapNaviConfig::set_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::set_appName");
            }
        
            // args
            // jsonable arg
            NSString* appName = (NSString*) args[@"appName"];
        
            // ref
            AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.appName = appName;
            methodResult(@"success");
        },
        
        @"AMapNaviConfig::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::set_destination");
            }
        
            // args
            // struct arg
            NSValue* destinationValue = (NSValue*) HEAP[args[@"destination"]];
            CLLocationCoordinate2D destination;
            [destinationValue getValue:&destination];
        
            // ref
            AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destination = destination;
            methodResult(@"success");
        },
        
        @"AMapNaviConfig::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::set_strategy");
            }
        
            // args
            // enum arg
            AMapDrivingStrategy strategy = (AMapDrivingStrategy) [args[@"strategy"] integerValue];
        
            // ref
            AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.strategy = strategy;
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::set_appScheme");
            }
        
            // args
            // jsonable arg
            NSString* appScheme = (NSString*) args[@"appScheme"];
        
            // ref
            AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.appScheme = appScheme;
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::set_appName");
            }
        
            // args
            // jsonable arg
            NSString* appName = (NSString*) args[@"appName"];
        
            // ref
            AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.appName = appName;
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_startCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::set_startCoordinate");
            }
        
            // args
            // struct arg
            NSValue* startCoordinateValue = (NSValue*) HEAP[args[@"startCoordinate"]];
            CLLocationCoordinate2D startCoordinate;
            [startCoordinateValue getValue:&startCoordinate];
        
            // ref
            AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.startCoordinate = startCoordinate;
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_destinationCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::set_destinationCoordinate");
            }
        
            // args
            // struct arg
            NSValue* destinationCoordinateValue = (NSValue*) HEAP[args[@"destinationCoordinate"]];
            CLLocationCoordinate2D destinationCoordinate;
            [destinationCoordinateValue getValue:&destinationCoordinate];
        
            // ref
            AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destinationCoordinate = destinationCoordinate;
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_drivingStrategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::set_drivingStrategy");
            }
        
            // args
            // enum arg
            AMapDrivingStrategy drivingStrategy = (AMapDrivingStrategy) [args[@"drivingStrategy"] integerValue];
        
            // ref
            AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.drivingStrategy = drivingStrategy;
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_transitStrategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::set_transitStrategy");
            }
        
            // args
            // enum arg
            AMapTransitStrategy transitStrategy = (AMapTransitStrategy) [args[@"transitStrategy"] integerValue];
        
            // ref
            AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.transitStrategy = transitStrategy;
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_routeType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::set_routeType");
            }
        
            // args
            // enum arg
            AMapRouteSearchType routeType = (AMapRouteSearchType) [args[@"routeType"] integerValue];
        
            // ref
            AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.routeType = routeType;
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::set_appScheme");
            }
        
            // args
            // jsonable arg
            NSString* appScheme = (NSString*) args[@"appScheme"];
        
            // ref
            AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.appScheme = appScheme;
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::set_appName");
            }
        
            // args
            // jsonable arg
            NSString* appName = (NSString*) args[@"appName"];
        
            // ref
            AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.appName = appName;
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::set_keywords");
            }
        
            // args
            // jsonable arg
            NSString* keywords = (NSString*) args[@"keywords"];
        
            // ref
            AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.keywords = keywords;
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_leftTopCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::set_leftTopCoordinate");
            }
        
            // args
            // struct arg
            NSValue* leftTopCoordinateValue = (NSValue*) HEAP[args[@"leftTopCoordinate"]];
            CLLocationCoordinate2D leftTopCoordinate;
            [leftTopCoordinateValue getValue:&leftTopCoordinate];
        
            // ref
            AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.leftTopCoordinate = leftTopCoordinate;
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_rightBottomCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::set_rightBottomCoordinate");
            }
        
            // args
            // struct arg
            NSValue* rightBottomCoordinateValue = (NSValue*) HEAP[args[@"rightBottomCoordinate"]];
            CLLocationCoordinate2D rightBottomCoordinate;
            [rightBottomCoordinateValue getValue:&rightBottomCoordinate];
        
            // ref
            AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.rightBottomCoordinate = rightBottomCoordinate;
            methodResult(@"success");
        },
        
        @"AMapServices::set_apiKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapServices::set_apiKey");
            }
        
            // args
            // jsonable arg
            NSString* apiKey = (NSString*) args[@"apiKey"];
        
            // ref
            AMapServices* ref = (AMapServices*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.apiKey = apiKey;
            methodResult(@"success");
        },
        
        @"AMapServices::set_enableHTTPS": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapServices::set_enableHTTPS");
            }
        
            // args
            // jsonable arg
            BOOL enableHTTPS = [args[@"enableHTTPS"] boolValue];
        
            // ref
            AMapServices* ref = (AMapServices*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.enableHTTPS = enableHTTPS;
            methodResult(@"success");
        },
        
        @"AMapServices::set_crashReportEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapServices::set_crashReportEnabled");
            }
        
            // args
            // jsonable arg
            BOOL crashReportEnabled = [args[@"crashReportEnabled"] boolValue];
        
            // ref
            AMapServices* ref = (AMapServices*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.crashReportEnabled = crashReportEnabled;
            methodResult(@"success");
        },
        
        @"AMapNaviConfig::set_appScheme_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appScheme = (NSString*) args[@"appScheme"];
        
                // ref
                AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.appScheme = appScheme;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapNaviConfig::set_appName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appName = (NSString*) args[@"appName"];
        
                // ref
                AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.appName = appName;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapNaviConfig::set_destination_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* destinationValue = (NSValue*) HEAP[args[@"destination"]];
                CLLocationCoordinate2D destination;
                [destinationValue getValue:&destination];
        
                // ref
                AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.destination = destination;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapNaviConfig::set_strategy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                AMapDrivingStrategy strategy = (AMapDrivingStrategy) [args[@"strategy"] integerValue];
        
                // ref
                AMapNaviConfig* ref = (AMapNaviConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.strategy = strategy;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_appScheme_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appScheme = (NSString*) args[@"appScheme"];
        
                // ref
                AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.appScheme = appScheme;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_appName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appName = (NSString*) args[@"appName"];
        
                // ref
                AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.appName = appName;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_startCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* startCoordinateValue = (NSValue*) HEAP[args[@"startCoordinate"]];
                CLLocationCoordinate2D startCoordinate;
                [startCoordinateValue getValue:&startCoordinate];
        
                // ref
                AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.startCoordinate = startCoordinate;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_destinationCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* destinationCoordinateValue = (NSValue*) HEAP[args[@"destinationCoordinate"]];
                CLLocationCoordinate2D destinationCoordinate;
                [destinationCoordinateValue getValue:&destinationCoordinate];
        
                // ref
                AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.destinationCoordinate = destinationCoordinate;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_drivingStrategy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                AMapDrivingStrategy drivingStrategy = (AMapDrivingStrategy) [args[@"drivingStrategy"] integerValue];
        
                // ref
                AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.drivingStrategy = drivingStrategy;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_transitStrategy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                AMapTransitStrategy transitStrategy = (AMapTransitStrategy) [args[@"transitStrategy"] integerValue];
        
                // ref
                AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.transitStrategy = transitStrategy;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_routeType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                AMapRouteSearchType routeType = (AMapRouteSearchType) [args[@"routeType"] integerValue];
        
                // ref
                AMapRouteConfig* ref = (AMapRouteConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.routeType = routeType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_appScheme_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appScheme = (NSString*) args[@"appScheme"];
        
                // ref
                AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.appScheme = appScheme;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_appName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appName = (NSString*) args[@"appName"];
        
                // ref
                AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.appName = appName;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_keywords_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* keywords = (NSString*) args[@"keywords"];
        
                // ref
                AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.keywords = keywords;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_leftTopCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* leftTopCoordinateValue = (NSValue*) HEAP[args[@"leftTopCoordinate"]];
                CLLocationCoordinate2D leftTopCoordinate;
                [leftTopCoordinateValue getValue:&leftTopCoordinate];
        
                // ref
                AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.leftTopCoordinate = leftTopCoordinate;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_rightBottomCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* rightBottomCoordinateValue = (NSValue*) HEAP[args[@"rightBottomCoordinate"]];
                CLLocationCoordinate2D rightBottomCoordinate;
                [rightBottomCoordinateValue getValue:&rightBottomCoordinate];
        
                // ref
                AMapPOIConfig* ref = (AMapPOIConfig*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.rightBottomCoordinate = rightBottomCoordinate;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapServices::set_apiKey_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* apiKey = (NSString*) args[@"apiKey"];
        
                // ref
                AMapServices* ref = (AMapServices*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.apiKey = apiKey;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapServices::set_enableHTTPS_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL enableHTTPS = [args[@"enableHTTPS"] boolValue];
        
                // ref
                AMapServices* ref = (AMapServices*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.enableHTTPS = enableHTTPS;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapServices::set_crashReportEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL crashReportEnabled = [args[@"crashReportEnabled"] boolValue];
        
                // ref
                AMapServices* ref = (AMapServices*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.crashReportEnabled = crashReportEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"RefClass::isKindOfAMapURLSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[AMapURLSearch class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapNaviConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[AMapNaviConfig class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapRouteConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[AMapRouteConfig class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapPOIConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[AMapPOIConfig class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapServices": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[AMapServices class]];
            methodResult(@(isTargetType));
        },
        
        @"ObjectFactory::createAMapURLSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapURLSearch");
            }
        
            AMapURLSearch* ref = [[AMapURLSearch alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapNaviConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapNaviConfig");
            }
        
            AMapNaviConfig* ref = [[AMapNaviConfig alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapRouteConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapRouteConfig");
            }
        
            AMapRouteConfig* ref = [[AMapRouteConfig alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapPOIConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapPOIConfig");
            }
        
            AMapPOIConfig* ref = [[AMapPOIConfig alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapServices": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapServices");
            }
        
            AMapServices* ref = [[AMapServices alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapURLSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapURLSearch* ref = [[AMapURLSearch alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapNaviConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapNaviConfig* ref = [[AMapNaviConfig alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapRouteConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapRouteConfig* ref = [[AMapRouteConfig alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapPOIConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapPOIConfig* ref = [[AMapPOIConfig alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapServices": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                AMapServices* ref = [[AMapServices alloc] init];
                HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
                [resultList addObject:[NSNumber numberWithLong: ref.hash]];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"AMapCoordinateConvert::AMapCoordinateConvert": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[args[@"coordinate"]];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // enum arg
            AMapCoordinateType type = (AMapCoordinateType) [args[@"type"] integerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapCoordinateConvert::AMapCoordinateConvert(%@, %@)", args[@"coordinate"], args[@"type"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = AMapCoordinateConvert(coordinate, type);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"AMapDataAvailableForCoordinate::AMapDataAvailableForCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[args[@"coordinate"]];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapDataAvailableForCoordinate::AMapDataAvailableForCoordinate(%@)", args[@"coordinate"]);
            }
        
            // invoke native method
            BOOL result = AMapDataAvailableForCoordinate(coordinate);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
    };
}

@end
